// Automatically generated by Interoptopus.

#pragma warning disable 0105
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using rust_run;
#pragma warning restore 0105

namespace rust_run
{
    public static partial class Interop
    {
        public const string NativeLib = "csharp";

        static Interop()
        {
            var api_version = Interop.my_api_guard();
            if (api_version != 3970726040101399907ul)
            {
                throw new TypeLoadException($"API reports hash {api_version} which differs from hash in bindings (3970726040101399907). You probably forgot to update / copy either the bindings or the library.");
            }
        }

        public const uint SOME_CONST = (uint) 314;


        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "my_function")]
        public static extern IntPtr my_function(IntPtr input);


        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "callback")]
        public static extern void callback(Sliceu8 x, InteropDelegate_fn_Sliceu8 input);

        public static void callback(byte[] x, InteropDelegate_fn_Sliceu8 input) {
            var x_pinned = GCHandle.Alloc(x, GCHandleType.Pinned);
            var x_slice = new Sliceu8(x_pinned, (ulong) x.Length);
            try
            {
                callback(x_slice, input);;
            }
            finally
            {
                x_pinned.Free();
            }
        }

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "input")]
        public static extern SliceMutu8 input(SliceMutu8 x);

        public static SliceMutu8 input(byte[] x) {
            var x_pinned = GCHandle.Alloc(x, GCHandleType.Pinned);
            var x_slice = new SliceMutu8(x_pinned, (ulong) x.Length);
            try
            {
                return input(x_slice);;
            }
            finally
            {
                x_pinned.Free();
            }
        }

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "my_function3")]
        public static extern void my_function3(CallbackSlice callback);


        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "my_function4")]
        public static extern void my_function4(InputString callback);


        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "my_api_guard")]
        public static extern ulong my_api_guard();


        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "get_value")]
        public static extern Optionu8 get_value();


        /// Destroys the given instance.
        ///
        /// # Safety
        ///
        /// The passed parameter MUST have been created with the corresponding init function;
        /// passing any other value results in undefined behavior.
        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "rs_destroy")]
        public static extern MyFFIError rs_destroy(ref IntPtr context);

        public static void rs_destroy_checked(ref IntPtr context) {
            var rval = rs_destroy(ref context);;
            if (rval != MyFFIError.Ok)
            {
                throw new InteropException<MyFFIError>(rval);
            }
        }

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "rs_new")]
        public static extern MyFFIError rs_new(ref IntPtr context, float x, float y);

        public static void rs_new_checked(ref IntPtr context, float x, float y) {
            var rval = rs_new(ref context, x, y);;
            if (rval != MyFFIError.Ok)
            {
                throw new InteropException<MyFFIError>(rval);
            }
        }

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "rs_get_x")]
        public static extern float rs_get_x(IntPtr context);


        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "rs_get_y")]
        public static extern float rs_get_y(IntPtr context);


        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "rs_add")]
        public static extern void rs_add(IntPtr context, IntPtr t);


    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void InteropDelegate_fn_Sliceu8(Sliceu8 x0);

    public enum MyFFIError
    {
        Ok = 0,
        NullPassed = 1,
        Panic = 2,
        OtherError = 3,
    }

    ///A pointer to an array of data someone else owns which may not be modified.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Sliceu8
    {
        ///Pointer to start of immutable data.
        IntPtr data;
        ///Number of elements.
        ulong len;
    }

    public partial struct Sliceu8 : IEnumerable<byte>
    {
        public Sliceu8(GCHandle handle, ulong count)
        {
            this.data = handle.AddrOfPinnedObject();
            this.len = count;
        }
        public Sliceu8(IntPtr handle, ulong count)
        {
            this.data = handle;
            this.len = count;
        }
        public byte this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var size = Marshal.SizeOf(typeof(byte));
                var ptr = new IntPtr(data.ToInt64() + i * size);
                return Marshal.PtrToStructure<byte>(ptr);
            }
        }
        public byte[] Copied
        {
            get
            {
                var rval = new byte[len];
                for (var i = 0; i < (int) len; i++) {
                    rval[i] = this[i];
                }
                return rval;
            }
        }
        public int Count => (int) len;
        public IEnumerator<byte> GetEnumerator()
        {
            for (var i = 0; i < (int)len; ++i)
            {
                yield return this[i];
            }
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }


    ///A pointer to an array of data someone else owns which may be modified.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct SliceMutu8
    {
        ///Pointer to start of mutable data.
        IntPtr data;
        ///Number of elements.
        ulong len;
    }

    public partial struct SliceMutu8 : IEnumerable<byte>
    {
        public SliceMutu8(GCHandle handle, ulong count)
        {
            this.data = handle.AddrOfPinnedObject();
            this.len = count;
        }
        public SliceMutu8(IntPtr handle, ulong count)
        {
            this.data = handle;
            this.len = count;
        }
        public byte this[int i]
        {
            get
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var size = Marshal.SizeOf(typeof(byte));
                var ptr = new IntPtr(data.ToInt64() + i * size);
                return Marshal.PtrToStructure<byte>(ptr);
            }
            set
            {
                if (i >= Count) throw new IndexOutOfRangeException();
                var size = Marshal.SizeOf(typeof(byte));
                var ptr = new IntPtr(data.ToInt64() + i * size);
                Marshal.StructureToPtr<byte>(value, ptr, false);
            }
        }
        public byte[] Copied
        {
            get
            {
                var rval = new byte[len];
                for (var i = 0; i < (int) len; i++) {
                    rval[i] = this[i];
                }
                return rval;
            }
        }
        public int Count => (int) len;
        public IEnumerator<byte> GetEnumerator()
        {
            for (var i = 0; i < (int)len; ++i)
            {
                yield return this[i];
            }
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }


    ///Option type containing boolean flag and maybe valid data.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Optionu8
    {
        ///Element that is maybe valid.
        byte t;
        ///Byte where `1` means element `t` is valid.
        byte is_some;
    }

    public partial struct Optionu8
    {
        public static Optionu8 FromNullable(byte? nullable)
        {
            var result = new Optionu8();
            if (nullable.HasValue)
            {
                result.is_some = 1;
                result.t = nullable.Value;
            }

            return result;
        }

        public byte? ToNullable()
        {
            return this.is_some == 1 ? this.t : (byte?)null;
        }
    }


    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate byte CallbackSlice(Sliceu8 x0);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    public delegate void InputString(string x0);


    public partial class Vec2 : IDisposable
    {
        private IntPtr _context;

        private Vec2() {}

        public static Vec2 New(float x, float y)
        {
            var self = new Vec2();
            var rval = Interop.rs_new(ref self._context, x, y);
            if (rval != MyFFIError.Ok)
            {
                throw new InteropException<MyFFIError>(rval);
            }
            return self;
        }

        public void Dispose()
        {
            var rval = Interop.rs_destroy(ref _context);
            if (rval != MyFFIError.Ok)
            {
                throw new InteropException<MyFFIError>(rval);
            }
        }

        public float GetX()
        {
            return Interop.rs_get_x(_context);
        }

        public float GetY()
        {
            return Interop.rs_get_y(_context);
        }

        public void Add(IntPtr t)
        {
            Interop.rs_add(_context, t);
        }

        public IntPtr Context => _context;
    }



    public class InteropException<T> : Exception
    {
        public T Error { get; private set; }

        public InteropException(T error): base($"Something went wrong: {error}")
        {
            Error = error;
        }
    }

}
